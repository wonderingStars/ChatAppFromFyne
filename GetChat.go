package main

import (
	"encoding/json"
	"fmt"
	"golang.org/x/net/context"
	"golang.org/x/net/proxy"
	"io/ioutil"
	"log"
	"net"
	"net/http"
	"net/http/cookiejar"
	"time"
)

const (
	torProxyAddr = "127.0.0.1:9050"
	dkfURL       = "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/chat/messages/general?json"
	DKFMembers   = "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/Members?json"
	//testing    = "http://dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/api/v1/chat/messages/Hidden_Figures?json"
	cokkieFromHeader string = "_csrf=fZHk68J35hujQaJscdWsKHNMgNNNwztO; auth-token=e76e6e88988ef26150b930561c18faa1c01d65d57a20a53687326fcc16848cbb"
	dkfHomePage             = "dkforestseeaaq2dqz2uflmlsybvnq2irzn4ygyvu53oazyorednviid.onion/forum"
)

var userNamesMsg []string
var userNameData []string
var membersList []string

var chatData []string

// GetHttpClient http client that uses tor proxy
func GetHttpClient() *http.Client {
	dialer, err := proxy.SOCKS5("tcp", torProxyAddr, nil, proxy.Direct)
	if err != nil {
		panic("failed to connect to tor proxy : " + err.Error())
	}
	transport := &http.Transport{
		DialContext: func(ctx context.Context, network, addr string) (net.Conn, error) {
			return dialer.Dial(network, addr)
		},
	}
	jar, err := cookiejar.New(nil)
	if err != nil {
		panic("failed to create cookie jar : " + err.Error())
	}
	return &http.Client{Transport: transport, Jar: jar}
}

func getChat(c *http.Client) {

	for {
		time.Sleep(5 * time.Second)

		URL := dkfURL
		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()
		req, err := http.NewRequestWithContext(ctx, http.MethodGet, URL, nil)
		if err != nil {
			log.Fatalf("error creating HTTP request: %v", err)
		}

		req.Header.Add("DKF_API_KEY", "Kw2to90pQbGENqQcBG2VNc5PyEM8Ff90")
		resp, err := c.Do(req)
		if err != nil {
			log.Println(err)
			fmt.Println("Check Tor Connection ")
		}
		defer resp.Body.Close()

		by, _ := ioutil.ReadAll(resp.Body)

		data := AutoGenerated{}

		//	messagesFromChat := data
		_ = json.Unmarshal([]byte(by), &data)
		//fmt.Print("\033[H\033[2J")
		// sending data to the struct
		ChatMsgToArray(data)
		ChatMembersToArray(data)
		fmt.Println(string(by))
		if resp.StatusCode != http.StatusOK {
			log.Println(resp.Status)

		}

	}

}

type AutoGenerated struct {
	Members []struct {
		Username string `json:"Username"`
		Color    string `json:"Color"`
	} `json:"Members"`
	Messages []struct {
		UUID       string `json:"UUID"`
		Message    string `json:"Message"`
		RawMessage string `json:"RawMessage"`
		Username   string `json:"Username"`
		ToUsername string `json:"ToUsername,omitempty"`
		CreatedAt  string `json:"CreatedAt"`
	} `json:"Messages"`
}

func ChatMsgToArray(data AutoGenerated) {

	for i := 0; i < len(data.Messages); i++ {
		chatString := fmt.Sprint(data.Messages[i].Username + ":" + data.Messages[i].RawMessage)
		userNameData := fmt.Sprint(data.Messages[i].Username)
		chatData = append(chatData, chatString)
		userNamesMsg = append(userNamesMsg, userNameData)
	}

}

func ChatMembersToArray(data AutoGenerated) {

	for i := 0; i < len(data.Members); i++ {
		chatString := fmt.Sprint(data.Members[i].Username)
		membersList = append(membersList, chatString)
	}

}
